<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FastText.NetWrapper</name>
    </assembly>
    <members>
        <member name="T:FastText.NetWrapper.TrainProgressCallback">
            <summary>
            Training progress callback.
            </summary>
            <param name="progress">Progress percentage in range [0..1].</param>
            <param name="loss">Current average loss.</param>
            <param name="wst">Words per thread per second.</param>
            <param name="eta">Estimated time in seconds.</param>
        </member>
        <member name="T:FastText.NetWrapper.AutotuneProgressCallback">
            <summary>
            Autotune progress callback.
            </summary>
            <param name="progress">Progress percentage in range [0..1].</param>
            <param name="trials">Number of trials.</param>
            <param name="bestScore">Best score so far.</param>
            <param name="eta">Estimated time in seconds.</param>
        </member>
        <member name="T:FastText.NetWrapper.LossName">
            <summary>
            Training loss.
            </summary>
        </member>
        <member name="T:FastText.NetWrapper.UnsupervisedModel">
            <summary>
            Unsupervised model.
            </summary>
        </member>
        <member name="T:FastText.NetWrapper.ModelName">
            <summary>
            FastText model.
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.QuantizedSupervisedArgs.qout">
            <summary>
            quantizing the classifier [0]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.QuantizedSupervisedArgs.retrain">
            <summary>
            finetune embeddings if a cutoff is applied [0]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.QuantizedSupervisedArgs.qnorm">
            <summary>
            quantizing the norm separately [0]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.QuantizedSupervisedArgs.cutoff">
            <summary>
            number of words and ngrams to retain [0]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.QuantizedSupervisedArgs.dsub">
            <summary>
            size of each sub-vector [2]
            </summary>
        </member>
        <member name="T:FastText.NetWrapper.SupervisedArgs">
            <summary>
            Arguments for supervised model training.
            </summary>
        </member>
        <member name="T:FastText.NetWrapper.UnsupervisedArgs">
            <summary>
            Arguments for unsupervised learning.
            </summary>
        </member>
        <member name="T:FastText.NetWrapper.FastTextArgs">
            <summary>
            This class contains all options that can be passed to fastText.
            Consult https://github.com/facebookresearch/fastText/blob/master/docs/options.md for their meaning.
            </summary>
        </member>
        <member name="M:FastText.NetWrapper.FastTextArgs.#ctor">
            <summary>
            This constructor gets values from
            https://github.com/olegtarasov/fastText/blob/b0a32d744f4d16d8f9834649f6f178ff79b5a4ce/src/fasttext_api.cc#L12
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.lr">
            <summary>
            learning rate [0.1]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.lrUpdateRate">
            <summary>
            change the rate of updates for the learning rate [100]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.dim">
            <summary>
            size of word vectors [100]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.ws">
            <summary>
            size of the context window [5]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.epoch">
            <summary>
            number of epochs [5]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.minCount">
            <summary>
            minimal number of word occurrences [1]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.minCountLabel">
            <summary>
            minimal number of label occurrences [0]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.neg">
            <summary>
            number of negatives sampled [5]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.wordNgrams">
            <summary>
            max length of word ngram [1]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.loss">
            <summary>
            loss function {ns, hs, softmax} [softmax]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.model">
            <summary>
            Model to use.
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.bucket">
            <summary>
            number of buckets [2000000]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.minn">
            <summary>
            min length of char ngram [0]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.maxn">
            <summary>
            max length of char ngram [0]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.thread">
            <summary>
            number of threads [12]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.t">
            <summary>
            sampling threshold [0.0001]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.saveOutput">
            <summary>
            whether output params should be saved [0]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.seed">
            <summary>
            Fixed random seed.
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.LabelPrefix">
            <summary>
            labels prefix [__label__]
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.PretrainedVectors">
            <summary>
            pretrained word vectors for supervised learning []
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.FastTextArgs.TrainProgressCallback">
            <summary>
            Optional training progress callback.
            </summary>
        </member>
        <member name="T:FastText.NetWrapper.AutotuneArgs">
            <summary>
            Autotune arguments.
            </summary>
        </member>
        <member name="M:FastText.NetWrapper.AutotuneArgs.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:FastText.NetWrapper.AutotuneArgs.#ctor(System.String)">
            <summary>
            Ctor specifying a validation file.
            </summary>
            <param name="validationFile">Validation file to tune on.</param>
        </member>
        <member name="P:FastText.NetWrapper.AutotuneArgs.ValidationFile">
            <summary>
            Path to a labeled validation file for autotuning. 
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.AutotuneArgs.Metric">
            <summary>
            Metric to autotune with. Default is "f1".
            See https://github.com/olegtarasov/fastText/blob/c_api/docs/autotune.md#how-to-set-the-optimization-metric
            for possible options.
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.AutotuneArgs.Predictions">
            <summary>
            Number of predictions to make during autotune. Default is 1.
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.AutotuneArgs.Duration">
            <summary>
            Time in seconds to spend on tuning. Default is 60 * 5 = 5 minutes.
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.AutotuneArgs.ModelSize">
            <summary>
            If set, creates a quantized model, also optimizing quantization parameters.
            See https://github.com/olegtarasov/fastText/blob/c_api/docs/autotune.md#constrain-model-size
            for details.
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.AutotuneArgs.Verbose">
            <summary>
            Autotune console verbosity. 0 for silent, > 0 for verbose.
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.AutotuneArgs.AutotuneProgressCallback">
            <summary>
            Optional autotune progress callback.
            </summary>
        </member>
        <member name="T:FastText.NetWrapper.FastTextWrapper">
            <summary>
            A wrapper around native fastText implementation.
            </summary>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.#ctor(System.Boolean,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Ctor.
            </summary>
            <param name="useBundledLibrary">
            If <code>true</code>, a bundled copy of fastText binary is extracted to process' current directory.
            You can set this to <code>false</code>, but then you must ensure that a compatible binary for your
            platform is discoverable by system library loader.
            
            You can compile your own binary from this specific fork: https://github.com/olegtarasov/fastText.
            </param>
            <param name="loggerFactory">Optional logger factory.</param>
        </member>
        <member name="P:FastText.NetWrapper.FastTextWrapper.ModelPath">
            <summary>
            Path to a model binary. Can be empty if model is not trained or loaded, or
            if model was loaded from memory.
            </summary>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.LoadModel(System.String)">
            <summary>
            Loads a trained model from a file.
            </summary>
            <param name="path">Path to a model (.bin file).</param>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.LoadModel(System.Byte[])">
            <summary>
            Loads a trained model from a byte array.
            </summary>
            <param name="bytes">Bytes array containing the model (.bin file).</param>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.GetLabels">
            <summary>
            Gets all labels that classifier was trained on.
            </summary>
            <returns>Labels.</returns>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.IsModelReady">
            <summary>
            Returns <code>true</code> if a model was trained or loaded and is ready.
            </summary>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.GetModelDimension">
            <summary>
            Gets the vector dimension of the loaded model.
            </summary>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.Supervised(System.String,System.String)">
            <summary>
            Trains a new supervised model.
            </summary>
            <param name="inputPath">Path to a training set.</param>
            <param name="outputPath">Path to write the model to (excluding extension).</param>
            <remarks>Trained model will consist of two files: .bin (main model) and .vec (word vectors).</remarks>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.Supervised(System.String,System.String,FastText.NetWrapper.SupervisedArgs,FastText.NetWrapper.TrainProgressCallback)">
            <summary>
            Trains a new supervised model.
            </summary>
            <param name="inputPath">Path to a training set.</param>
            <param name="outputPath">Path to write the model to (excluding extension).</param>
            <param name="args">
            Training arguments. If <see cref="T:FastText.NetWrapper.SupervisedArgs"/> is passed, a supervised model will be trained.
            If <see cref="T:FastText.NetWrapper.QuantizedSupervisedArgs"/> is passed, model will be quantized after training.
            </param>
            <param name="progressCallback">Optional progress callback.</param>
            <remarks>Trained model will consist of two files: .bin (main model) and .vec (word vectors).</remarks>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.Supervised(System.String,System.String,FastText.NetWrapper.SupervisedArgs,FastText.NetWrapper.AutotuneArgs,FastText.NetWrapper.TrainProgressCallback)">
            <summary>
            Trains a new supervised model. If <see cref="P:FastText.NetWrapper.AutotuneArgs.ValidationFile"/> is specified, an automated
            hyperparameter search will be performed.
            </summary>
            <param name="inputPath">Path to a training set.</param>
            <param name="outputPath">Path to write the model to (excluding extension).</param>
            <param name="args">
            Training arguments. If <see cref="T:FastText.NetWrapper.SupervisedArgs"/> is passed, a supervised model will be trained.
            If <see cref="T:FastText.NetWrapper.QuantizedSupervisedArgs"/> is passed, model will be quantized after training.
            </param>
            <param name="autotuneArgs">Autotune arguments.</param>
            <param name="progressCallback">Optional progress callback.</param>
            <remarks>Trained model will consist of two files: .bin (main model) and .vec (word vectors).</remarks>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.Supervised(System.String,System.String,FastText.NetWrapper.SupervisedArgs,FastText.NetWrapper.AutotuneArgs,System.Boolean)">
            <summary>
            Trains a new supervised model. If <see cref="P:FastText.NetWrapper.AutotuneArgs.ValidationFile"/> is specified, an automated
            hyperparameter search will be performed.
            </summary>
            <param name="inputPath">Path to a training set.</param>
            <param name="outputPath">Path to write the model to (excluding extension).</param>
            <param name="args">
            Training arguments. If <see cref="T:FastText.NetWrapper.SupervisedArgs"/> is passed, a supervised model will be trained.
            If <see cref="T:FastText.NetWrapper.QuantizedSupervisedArgs"/> is passed, model will be quantized after training.
            </param>
            <param name="autotuneArgs">Autotune arguments.</param>
            <param name="debug">Whether to write debug info.</param>
            <remarks>Trained model will consist of two files: .bin (main model) and .vec (word vectors).</remarks>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.Unsupervised(FastText.NetWrapper.UnsupervisedModel,System.String,System.String)">
            <summary>
            Trains a new unsupervised model.
            </summary>
            <param name="model">Type of unsupervised model: Skipgram or Cbow.</param>
            <param name="inputPath">Path to a training set.</param>
            <param name="outputPath">Path to write the model to (excluding extension).</param>
            <remarks>Trained model will consist of two files: .bin (main model) and .vec (word vectors).</remarks>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.Unsupervised(FastText.NetWrapper.UnsupervisedModel,System.String,System.String,FastText.NetWrapper.UnsupervisedArgs)">
            <summary>
            Trains a new unsupervised model.
            </summary>
            <param name="model">Type of unsupervised model: Skipgram or Cbow.</param>
            <param name="inputPath">Path to a training set.</param>
            <param name="outputPath">Path to write the model to (excluding extension).</param>
            <param name="args">Low-level training arguments.</param>
            <remarks>Trained model will consist of two files: .bin (main model) and .vec (word vectors).</remarks>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.Quantize(FastText.NetWrapper.QuantizedSupervisedArgs,System.String)">
            <summary>
            Quantize a loaded model.
            </summary>
            <param name="args">Quantization args.</param>
            <param name="output">Custom output path. Required if model was loaded from memory.</param>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.GetNN(System.String,System.Int32)">
            <summary>
            Calculate nearest neighbors from input text.
            </summary>
            <param name="text">Text to calculate nearest neighbors from.</param>
            <param name="number">Number of neighbors.</param>
            <returns>Nearest neighbor predictions.</returns>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.GetNearestNeighbours(System.String,System.Int32)">
            <summary>
            Calculate nearest neighbors from input text.
            </summary>
            <param name="text">Text to calculate nearest neighbors from.</param>
            <param name="number">Number of neighbors.</param>
            <returns>Nearest neighbor predictions.</returns>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.GetSentenceVector(System.String)">
            <summary>
            Vectorizes a sentence.
            </summary>
            <param name="text">Sentence to vectorize.</param>
            <returns>A single averaged vector.</returns>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.GetWordVector(System.String)">
            <summary>
            Vectorizes a word.
            </summary>
            <param name="word">Word to vectorize.</param>
            <returns>A single vector.</returns>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.PredictSingle(System.String)">
            <summary>
            Predicts a single label from input text.
            </summary>
            <param name="text">Text to predict a label from.</param>
            <returns>Single prediction.</returns>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.PredictMultiple(System.String,System.Int32)">
            <summary>
            Predicts multiple labels from input text.
            </summary>
            <param name="text">Text to predict labels from.</param>
            <param name="number">Number of labels to predict.</param>
            <returns>Multiple predictions.</returns>
        </member>
        <member name="M:FastText.NetWrapper.FastTextWrapper.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FastText.NetWrapper.Metrics.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.Metrics.Label">
            <summary>
            Metrics label. Will be <code>null</code> if this is a <see cref="P:FastText.NetWrapper.TestResult.GlobalMetrics"/>.
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.Metrics.Gold">
            <summary>
            Total number of times this label was a true label in a prediction.
            In case of <see cref="P:FastText.NetWrapper.TestResult.GlobalMetrics"/> it's a total number of
            true labels (not distinct) through all test predictions.
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.Metrics.Predicted">
            <summary>
            Total number of times this label was predicted.
            In case of <see cref="P:FastText.NetWrapper.TestResult.GlobalMetrics"/> it's a total number of
            predicted labels (not distinct) through all predictions.
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.Metrics.PredictedGold">
            <summary>
            Total number of times this label was predicted correctly.
            In case of <see cref="P:FastText.NetWrapper.TestResult.GlobalMetrics"/> it's a total number of
            correctly predicted labels (not distinct) through all predictions.
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.Metrics.ScoreVsTrue">
            <summary>
            An array of all predicted scores for this label versus 1.0 if the prediction
            was correct or 0.0 if not. Array will be empty if this is a <see cref="P:FastText.NetWrapper.TestResult.GlobalMetrics"/>.
            </summary>
        </member>
        <member name="M:FastText.NetWrapper.Metrics.GetPrecision">
            <summary>
            Gets precision value. May be <code>double.NaN</code> if <see cref="P:FastText.NetWrapper.Metrics.Predicted"/> is 0.
            </summary>
        </member>
        <member name="M:FastText.NetWrapper.Metrics.GetRecall">
            <summary>
            Gets recall value. May be <code>double.NaN</code> if <see cref="P:FastText.NetWrapper.Metrics.Gold"/> is 0.
            </summary>
        </member>
        <member name="M:FastText.NetWrapper.Metrics.GetF1">
            <summary>
            Gets F1 value. May be <code>double.NaN</code> if <see cref="P:FastText.NetWrapper.Metrics.Predicted"/> and <see cref="P:FastText.NetWrapper.Metrics.Gold"/> is 0.
            </summary>
        </member>
        <member name="T:FastText.NetWrapper.Prediction">
            <summary>
            Represents a single label prediction.
            </summary>
        </member>
        <member name="F:FastText.NetWrapper.Prediction.Probability">
            <summary>
            Label probability.
            </summary>
        </member>
        <member name="F:FastText.NetWrapper.Prediction.Label">
            <summary>
            Label text.
            </summary>
        </member>
        <member name="M:FastText.NetWrapper.Prediction.#ctor(System.Single,System.String)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:FastText.NetWrapper.TestResult.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.TestResult.Examples">
            <summary>
            Total number of examples in a test.
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.TestResult.GlobalMetrics">
            <summary>
            Aggregated metrics for the test run.
            </summary>
        </member>
        <member name="P:FastText.NetWrapper.TestResult.LabelMetrics">
            <summary>
            Per-label metrics for the test run.
            </summary>
        </member>
        <member name="M:FastText.NetWrapper.TestResult.GetSortedScoreVsTrue(System.String)">
            <summary>
            Gets an array <see cref="P:FastText.NetWrapper.Metrics.ScoreVsTrue"/> for specified label, sorted by score.
            If <see cref="!:label"/> is null, this method returns aggregated and sorted array through
            all the labels.
            </summary>
            <param name="label">Valid label or <code>null</code>.</param>
            <exception cref="T:System.InvalidOperationException">When label was not found in test results.</exception>
        </member>
        <member name="M:FastText.NetWrapper.TestResult.GetPositiveCounts(System.String)">
            <summary>
            Gets accumulated true and false positive counts for a specified label (based on <see cref="P:FastText.NetWrapper.Metrics.ScoreVsTrue"/>).
            If <see cref="!:label"/> is null, this method returns aggregated and sorted array through
            all the labels.
            </summary>
            <param name="label">Valid label or <code>null</code>.</param>
            <exception cref="T:System.InvalidOperationException">When label was not found in test results.</exception>
        </member>
        <member name="M:FastText.NetWrapper.TestResult.GetPrecisionRecallCurve(System.String)">
            <summary>
            Gets a precision-recall curve for a specified label.
            If <see cref="!:label"/> is null, this method returns aggregated result through
            all the labels.
            </summary>
            <param name="label">Valid label or <code>null</code>.</param>
            <exception cref="T:System.InvalidOperationException">When label was not found in test results.</exception>
        </member>
        <member name="M:FastText.NetWrapper.TestResult.GetPrecisionAtRecall(System.Double,System.String)">
            <summary>
            Gets precision at specified recall value for a specified label.
            If <see cref="!:label"/> is null, this method returns aggregated result through
            all the labels.
            </summary>
            <param name="recall">Recall to get precision at.</param>
            <param name="label">Valid label or <code>null</code>.</param>
            <exception cref="T:System.InvalidOperationException">When label was not found in test results.</exception>
        </member>
        <member name="M:FastText.NetWrapper.TestResult.GetRecallAtPrecision(System.Double,System.String)">
            <summary>
            Gets precision at specified recall value for a specified label.
            If <see cref="!:label"/> is null, this method returns aggregated result through
            all the labels.
            </summary>
            <param name="precision">Recall to get precision at.</param>
            <param name="label">Valid label or <code>null</code>.</param>
            <exception cref="T:System.InvalidOperationException">When label was not found in test results.</exception>
        </member>
    </members>
</doc>
